@using Jollicow.Models
@model PaymentMethodModel

<!-- Payment Method Dropdown -->
<div class="mb-4">
    <label class="form-label fw-bold mb-3">
        <i class="bi bi-credit-card me-2"></i>Phương thức thanh toán
    </label>
    <div class="payment-method-container">
        <div class="custom-select" id="customSelect">
            <div class="select-selected" id="selectSelected">
                Chọn phương thức thanh toán
                <i class="bi bi-chevron-down"></i>
            </div>
            <div class="select-items select-hide" id="selectItems">
                <div class="select-option" data-value="vietqr">
                    <i class="bi bi-qr-code me-2"></i>Chuyển khoản VietQR
                </div>
                <div class="select-option" data-value="vnpay">
                    <i class="bi bi-bank me-2"></i>Chuyển khoản VNPay
                </div>
                <div class="select-option" data-value="cash">
                    <i class="bi bi-cash-coin me-2"></i>Tiền mặt
                </div>
            </div>
        </div>
        <input type="hidden" id="paymentMethod" value="">
    </div>
</div>

<!-- Payment Button -->
<button class="payment-button w-100" type="button" id="paymentButton" onclick="processPayment()" disabled>
    <span class="button-text">Chọn phương thức thanh toán</span>
</button>

<script>
    @* Hàm cập nhật nút thanh toán dựa trên phương thức được chọn *@
        function updatePaymentButton() {
            const paymentMethod = document.getElementById('paymentMethod').value;
            const paymentButton = document.getElementById('paymentButton');
            const cartTotal = parseFloat(localStorage.getItem('cart_total') || '0');

            // Kiểm tra giỏ hàng rỗng
            if (cartTotal <= 0) {
                paymentButton.disabled = true;
                paymentButton.textContent = 'Giỏ hàng trống';
                paymentButton.className = 'payment-button w-100';
                return;
            }

            if (!paymentMethod) {
                paymentButton.disabled = true;
                paymentButton.textContent = 'Chọn phương thức thanh toán';
                paymentButton.className = 'payment-button w-100';
                return;
            }

            paymentButton.disabled = false;
            paymentButton.className = 'payment-button w-100';

            switch (paymentMethod) {
                case 'vietqr':
                    paymentButton.textContent = 'Thanh toán VietQR';
                    break;
                case 'vnpay':
                    paymentButton.textContent = 'Thanh toán VNPay';
                    break;
                case 'cash':
                    paymentButton.textContent = 'Thanh toán tiền mặt';
                    break;
                case 'card':
                    paymentButton.textContent = 'Thanh toán thẻ';
                    break;
                default:
                    paymentButton.textContent = 'Thanh toán';
            }
        }


    @* Hàm xử lý thanh toán *@
        function processPayment() {
            const paymentMethod = document.getElementById('paymentMethod').value;
            sessionStorage.setItem('checkoutInProgress', 'true');

            if (!paymentMethod) {
                alert('Vui lòng chọn phương thức thanh toán!');
                return;
            }

            switch (paymentMethod) {
                case 'vietqr':
                    redirectToVietQR();
                    break;
                case 'vnpay':
                    redirectToVNPay();
                    break;
                case 'cash':
                    processCashPayment();
                    break;
                case 'card':
                    processCardPayment();
                    break;
                default:
                    alert('Phương thức thanh toán không hợp lệ!');
            }
        }

    @* Hàm chuyển hướng đến VietQR *@
        async function redirectToVietQR() {
            const urlParams = new URLSearchParams(window.location.search);
            const acsc = urlParams.get('acsc');
            if (acsc) {
                window.location.href = `/Payment/VietQR?acsc=${encodeURIComponent(acsc)}`;
            } else {
                alert('Không tìm thấy mã truy cập hợp lệ.');
            }
        }

    @* Hàm chuyển hướng đến VNPay *@

        async function redirectToVNPay() {
            try {
                // Clear any existing timers or animations
                if (window.jQuery && window.jQuery.fx) {
                    window.jQuery.fx.off = true;
                }

                const urlParams = new URLSearchParams(window.location.search);
                const acsc = urlParams.get('acsc');
                const voucherId = localStorage.getItem('voucher_id') || '';

                const formData = new URLSearchParams();
                formData.append('acsc', acsc);
                formData.append('voucherId', voucherId);
                formData.append('paymentMethod', 'vnpay');

                const response = await fetch('/Payment/Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: formData
                });

                if (response.redirected) {
                    // Clear any timers before redirect
                    if (window.jQuery && window.jQuery.timers) {
                        window.jQuery.timers = [];
                    }

                    // Use replace instead of href to avoid back button issues
                    window.location.replace(response.url);
                } else {
                    const result = await response.text();
                    console.log('Phản hồi không chuyển hướng:', result);

                    // If no redirect, try to parse the response as URL
                    try {
                        const data = JSON.parse(result);
                        if (data.paymentUrl) {
                            window.location.replace(data.paymentUrl);
                        } else {
                            throw new Error('Không nhận được URL thanh toán');
                        }
                    } catch (parseError) {
                        console.error('Lỗi parse response:', parseError);
                        alert('Đã xảy ra lỗi khi xử lý thanh toán VNPay!');
                    }
                }
            } catch (error) {
                console.error('VNPay error:', error);
                alert('Đã xảy ra lỗi khi xử lý thanh toán VNPay!');
            }
        }

    @* Hàm xử lý thanh toán tiền mặt *@
        function processCashPayment() {
            const urlParams = new URLSearchParams(window.location.search);
            const acsc = urlParams.get('acsc');
            if (acsc) {
                window.location.href = `/Payment/Cash?acsc=${encodeURIComponent(acsc)}`;
            } else {
                alert('Không tìm thấy mã truy cập hợp lệ.');
            }
        }

    @* Hàm xử lý thanh toán thẻ *@
        function processCardPayment() {
            // TODO: Implement card payment logic
            alert('Tính năng thanh toán thẻ đang được phát triển!');
        }


    // Initialize custom dropdown
    document.addEventListener('DOMContentLoaded', function () {
        updatePaymentButton();
        initCustomDropdown();

        // Listen for cart total changes
        window.addEventListener('storage', function (e) {
            if (e.key === 'cart_total') {
                updatePaymentButton();
            }
        });
    });

    function initCustomDropdown() {
        const customSelect = document.getElementById('customSelect');
        const selectSelected = document.getElementById('selectSelected');
        const selectItems = document.getElementById('selectItems');
        const selectOptions = document.querySelectorAll('.select-option');
        const hiddenInput = document.getElementById('paymentMethod');

        // Toggle dropdown
        selectSelected.addEventListener('click', function (e) {
            e.stopPropagation();
            selectItems.classList.toggle('select-hide');
            selectSelected.classList.toggle('active');
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function () {
            selectItems.classList.add('select-hide');
            selectSelected.classList.remove('active');
        });

        // Handle option selection
        selectOptions.forEach(option => {
            option.addEventListener('click', function (e) {
                e.stopPropagation();
                const value = this.getAttribute('data-value');
                const text = this.textContent.trim();

                // Update hidden input
                hiddenInput.value = value;

                // Update selected text
                selectSelected.innerHTML = `${text}<i class="bi bi-chevron-down"></i>`;

                // Update option styling
                selectOptions.forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');

                // Close dropdown
                selectItems.classList.add('select-hide');
                selectSelected.classList.remove('active');

                // Update button
                updatePaymentButton();
            });
        });
    }
</script>