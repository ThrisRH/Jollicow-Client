@{
    ViewData["Title"] = "Giỏ hàng";
    var idTable = ViewData["IdTable"] ?? "";
    var restaurantId = ViewData["RestaurantId"] ?? "";
}

<head>
    <link rel="stylesheet" href="~/css/cart-detail.css" asp-append-version="true" />
</head>

<div class="cart-body d-flex flex-column justify-content-between">
    <div id="cartItemsContainer" class="cart-items mb-4">
        @* Item cart trong vùng này *@
    </div>

    <div class="cart-summary px-0" style="padding-top: 12px;">
        @if (!string.IsNullOrEmpty(idTable.ToString()) && !string.IsNullOrEmpty(restaurantId.ToString()))
        {
            <vc:promotion restaurant-id=" @restaurantId" />
        }

        <div class="cart-summary p-0 mb-2 mt-3">
            <div class="justify-content-between mb-1 mt-3" id="originalPriceRow" style="display: none;">
                <span>Giá gốc:</span>
                <span class="text-muted" id="originalPrice" style="text-decoration: line-through;">0đ</span>
            </div>
            <div class="justify-content-between mb-1" id="discountRow" style="display: none;">
                <span>Đã giảm:</span>
                <span class="text-success" id="discountAmount">0đ</span>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-3">
                <h5 class="mb-0 fw-bold">Tổng tiền:</h5>
                <h5 id="cartTotal" class="mb-0 text-danger" style="font-weight: bold; font-size: 20px;">0đ</h5>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(idTable.ToString()) && !string.IsNullOrEmpty(restaurantId.ToString()))
        {
            <vc:payment-method id-table="@idTable" restaurant-id="@restaurantId" />
        }
    </div>
</div>

@section Scripts {
    <script>
        const id_table = '@idTable';
        const restaurant_id = '@restaurantId';

        // Function để tính giá đúng cho từng món
        function calculateItemPrice(price, quantity) {
            const itemPrice = parseFloat(price) || 0;
            const itemQuantity = parseInt(quantity) || 1;

            // Kiểm tra xem price có vẻ đã bao gồm quantity hay không
            const unitPrice = itemPrice / itemQuantity;

            if (unitPrice < 5000) {
                // Có thể price đã bao gồm quantity
                return itemPrice;
            } else {
                // Price có vẻ là giá gốc
                return itemPrice * itemQuantity;
            }
        }

        async function apiFetch(url, method = 'GET', data = null, headers = { 'Content-Type': 'application/json' }) {
            const options = { method, headers };
            if (data) options.body = JSON.stringify(data);
            const response = await fetch(url, options);
            if (!response.ok) throw new Error(`API error: ${response.status}`);
            return response.json();
        }

        async function loadCartItems() {
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const checkoutBtn = document.getElementById('checkoutBtn');

            const payload = { id_table: id_table, id_restaurant: restaurant_id };
            const response = await apiFetch('https://jollicowfe-production.up.railway.app/api/admin/carts/filter', 'POST', payload);
            const cartItems = response.carts || [];

            console.log('Cart API Response:', response);
            console.log('Cart Items:', cartItems);

            // Test case: Giả sử có 1 item với price=40000, quantity=2
            // Nếu price đã bao gồm quantity thì total = 40000
            // Nếu price là giá gốc thì total = 40000 * 2 = 80000
            const testItem = cartItems[0];
            if (testItem) {
                console.log('Test case analysis:');
                console.log(`- Item price: ${testItem.price}`);
                console.log(`- Item quantity: ${testItem.quantity}`);
                console.log(`- Current calculation: ${testItem.price} * ${testItem.quantity} = ${testItem.price * testItem.quantity}`);
                console.log(`- If price includes quantity: total should be ${testItem.price}`);
                console.log(`- If price is unit price: total should be ${testItem.price * testItem.quantity}`);

                // Kiểm tra xem price có vẻ đã bao gồm quantity hay không
                const unitPrice = testItem.price / testItem.quantity;
                console.log(`- Calculated unit price: ${unitPrice}`);
                console.log(`- If unit price looks reasonable (e.g., 20000 for a dish), then price is unit price`);
                console.log(`- If unit price looks too low (e.g., 20000 for 2 dishes = 10000 each), then price includes quantity`);
            }

            if (cartItems.length === 0) {
                cartItemsContainer.innerHTML = '<div class="text-center py-4">Giỏ hàng đang trống</div>';
                if (checkoutBtn) checkoutBtn.disabled = true;
                document.getElementById('cartTotal').textContent = '0đ';
                // Xóa localStorage khi cart trống
                localStorage.removeItem('cart_total');
                return;
            }

            if (checkoutBtn) checkoutBtn.disabled = false;
            const cartUpdate = JSON.parse(localStorage.getItem('cart_update') || '{}');
            cartItemsContainer.innerHTML = cartItems.map((item, index) => {
                const displayQuantity = cartUpdate[item.id] ?? item.quantity;
                return `
                                                                                                                                    <div class="cart-item" data-id="${item.id}" data-price="${item.price}">
                                                                                                                                        <button class="btn btn-sm d-flex justify-content-center align-items-center btn-outline-danger remove-btn p-0 m-0 border-1"
                                                                                                                                                style="width: 24px; height: 24px; align-self: flex-end; border-radius: 6px" onclick="deleteItem('${item.id}')">
                                                                                                                                            <i class="bi bi-trash"></i>
                                                                                                                                        </button>
                                                                                                                                        <div class="cart-items-detail d-flex flex-row" style="gap: 12px">
                                                                                                                                            <div class="cart-item-image">
                                                                                                                                                <img src="${item.image}" alt="${item.name}" style="width: 80px; height: 80px; border-radius: 8px; object-fit: cover;">
                                                                                                                                            </div>
                                                                                                                                            <div class="cart-item-container">
                                                                                                                                                <div class="cart-item-details">
                                                                                                                                                    <div class="cart-item-name">${item.name}</div>
                                                                                                                                                    <div class="cart-item-options">
                                                                                                                                                        ${item.toppings && item.toppings.length > 0 ? `Topping: ${item.toppings.join(', ')}` : ''}
                                                                                                                                                    </div>
                                                                                                                                                </div>
                                                                                                                                                <div class="d-flex flex-row justify-content-between align-items-center">
                                                                                                                                                    <div class="cart-item-quantity">
                                                                                                                                                        <button class="quantity-btn" onclick="changeQuantity('${item.id}', -1)">-</button>
                                                                                                                                                        <input id="quantity-input-${item.id}" type="number" class="quantity-input" value="${displayQuantity}" style="color: #5F6368; font-size:12px" min="1" max="99" onchange="updateQuantityInput('${item.id}')">
                                                                                                                                                        <button class="quantity-btn" onclick="changeQuantity('${item.id}', 1)">+</button>
                                                                                                                                                    </div>
                                                                                                                                                    <div class="cart-item-price">${calculateItemPrice(item.price, displayQuantity).toLocaleString('vi-VN')}đ</div>
                                                                                                                                                </div>
                                                                                                                                            </div>
                                                                                                                                        </div>
                                                                                                                                    </div>
                                                                                                                                `;
            }).join('');

            // Chỉ tính toán tổng tiền nếu không có cart_update trong localStorage
            // hoặc nếu có cart_update thì dùng updateCartTotalFromDOM
            if (Object.keys(cartUpdate).length === 0) {
                updateCartTotal(cartItems);
            } else {
                updateCartTotalFromDOM();
            }
        }

        function changeQuantity(itemId, delta) {
            const cartUpdate = JSON.parse(localStorage.getItem('cart_update') || '{}');
            const input = document.getElementById(`quantity-input-${itemId}`);
            let current = cartUpdate[itemId] ?? Number(input.value);
            let newQuantity = Math.max(1, Math.min(99, current + delta));
            cartUpdate[itemId] = newQuantity;
            localStorage.setItem('cart_update', JSON.stringify(cartUpdate));
            input.value = newQuantity;

            // Cập nhật lại tổng tiền tạm thời
            updateCartTotalFromDOM();
        }

        function updateQuantityInput(itemId) {
            const input = document.getElementById(`quantity-input-${itemId}`);
            const newQuantity = Math.max(1, Math.min(99, Number(input.value) || 1));
            const cartUpdate = JSON.parse(localStorage.getItem('cart_update') || '{}');
            cartUpdate[itemId] = newQuantity;
            localStorage.setItem('cart_update', JSON.stringify(cartUpdate));
            input.value = newQuantity;

            // Cập nhật lại tổng tiền
            updateCartTotalFromDOM();
        }

        async function syncCartUpdateToServer() {
            const cartUpdate = JSON.parse(localStorage.getItem('cart_update') || '{}');
            const updates = Object.entries(cartUpdate);

            if (updates.length === 0) return;

            for (const [itemId, quantity] of updates) {
                try {
                    await fetch(`https://jollicowfe-production.up.railway.app/api/admin/carts/${itemId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ quantity: Number(quantity) })
                    });
                } catch (e) {
                    // Có thể xử lý lỗi ở đây nếu cần
                }
            }
            localStorage.removeItem('cart_update');
        }

        function deleteItem(itemId) {
            if (!confirm('Bạn có chắc chắn muốn xóa món này khỏi giỏ hàng?')) return;

            fetch('https://jollicowfe-production.up.railway.app/api/admin/carts/' + itemId, {
                method: 'DELETE'
            })
                .then(res => {
                    if (res.ok) loadCartItems();
                    else alert('Xoá thất bại!');
                });
        }

        function updateCartTotal(cartItems) {
            console.log('Cart Items for total calculation:', cartItems);

            // Logic để tính tổng tiền đúng theo số lượng
            const total = cartItems.reduce((sum, item) => {
                const itemPrice = parseFloat(item.price) || 0;
                const itemQuantity = parseInt(item.quantity) || 1;

                // Kiểm tra xem price có vẻ đã bao gồm quantity hay không
                // Nếu price quá cao so với quantity, có thể đã bao gồm quantity
                const unitPrice = itemPrice / itemQuantity;
                console.log(`Item: ${item.name}, Price: ${itemPrice}, Quantity: ${itemQuantity}, Unit Price: ${unitPrice}`);

                // Nếu unit price quá thấp (ví dụ: 10000 cho 1 món), có thể price đã bao gồm quantity
                // Nếu unit price hợp lý (ví dụ: 20000 cho 1 món), thì price là giá gốc
                let itemTotal;
                if (unitPrice < 5000) {
                    // Có thể price đã bao gồm quantity
                    itemTotal = itemPrice;
                    console.log(`  -> Price seems to include quantity, using: ${itemTotal}`);
                } else {
                    // Price có vẻ là giá gốc
                    itemTotal = itemPrice * itemQuantity;
                    console.log(`  -> Price seems to be unit price, calculating: ${itemPrice} * ${itemQuantity} = ${itemTotal}`);
                }

                return sum + itemTotal;
            }, 0);

            console.log('Final total:', total);

            // Lưu tổng tiền vào localStorage
            localStorage.setItem('cart_total', total.toString());

            // Trigger event để navbar cập nhật
            window.dispatchEvent(new CustomEvent('cartTotalUpdated', { detail: { total: total } }));

            const voucherData = JSON.parse(localStorage.getItem('voucher') || null);
            console.log('Voucher data from localStorage (updateCartTotal):', voucherData);

            const cartTotalElement = document.getElementById('cartTotal');
            const originalPriceElement = document.getElementById('originalPrice');
            const originalPriceRowElement = document.getElementById('originalPriceRow');
            const discountAmountElement = document.getElementById('discountAmount');
            const discountRowElement = document.getElementById('discountRow');

            if (voucherData && voucherData.percent > 0) {
                const { percent, maxDiscount } = voucherData;
                console.log('Applying voucher (updateCartTotal):', { percent, maxDiscount, total });

                let discounted = Math.round(total * (1 - percent / 100));
                if (total - discounted >= maxDiscount) {
                    discounted = total - maxDiscount;
                }

                console.log('Voucher calculation (updateCartTotal):', { total, discounted, discount: total - discounted });

                cartTotalElement.textContent = discounted.toLocaleString('vi-VN') + 'đ';
                originalPriceElement.textContent = total.toLocaleString('vi-VN') + 'đ';
                discountAmountElement.textContent = (total - discounted).toLocaleString('vi-VN') + 'đ';

                originalPriceRowElement.style.display = 'flex';
                discountRowElement.style.display = 'flex';

                localStorage.setItem('cartTotalAfterDiscount', discounted);
            } else {
                console.log('No voucher applied or invalid voucher data (updateCartTotal)');
                cartTotalElement.textContent = total.toLocaleString('vi-VN') + 'đ';
                originalPriceRowElement.style.display = 'none';
                discountRowElement.style.display = 'none';
            }
        }

        function updateCartTotalFromDOM() {
            const cartUpdate = JSON.parse(localStorage.getItem('cart_update') || '{}');
            let total = 0;

            console.log('Cart update from localStorage:', cartUpdate);

            document.querySelectorAll('.cart-item').forEach(itemDiv => {
                const itemId = itemDiv.dataset.id;
                const price = parseFloat(itemDiv.dataset.price) || 0;
                const quantity = cartUpdate[itemId] ?? Number(itemDiv.querySelector('.quantity-input').value);

                // Kiểm tra xem price có vẻ đã bao gồm quantity hay không
                const unitPrice = price / quantity;
                let itemTotal;

                if (unitPrice < 5000) {
                    // Có thể price đã bao gồm quantity
                    itemTotal = price;
                    console.log(`DOM Item ID: ${itemId}, Price: ${price}, Quantity: ${quantity}, Unit Price: ${unitPrice} -> Using price as total: ${itemTotal}`);
                } else {
                    // Price có vẻ là giá gốc
                    itemTotal = price * quantity;
                    console.log(`DOM Item ID: ${itemId}, Price: ${price}, Quantity: ${quantity}, Unit Price: ${unitPrice} -> Calculating: ${price} * ${quantity} = ${itemTotal}`);
                }

                total += itemTotal;
                // Cập nhật lại giá từng món trên UI nếu muốn:
                const priceDiv = itemDiv.querySelector('.cart-item-price');
                if (priceDiv) priceDiv.textContent = itemTotal.toLocaleString('vi-VN') + 'đ';
            });

            console.log('DOM Total:', total);

            // Lưu tổng tiền vào localStorage
            localStorage.setItem('cart_total', total.toString());

            // Trigger event để navbar cập nhật
            window.dispatchEvent(new CustomEvent('cartTotalUpdated', { detail: { total: total } }));

            // Xử lý voucher
            const voucherData = JSON.parse(localStorage.getItem('voucher') || null);
            console.log('Voucher data from localStorage:', voucherData);

            const cartTotalElement = document.getElementById('cartTotal');
            const originalPriceElement = document.getElementById('originalPrice');
            const originalPriceRowElement = document.getElementById('originalPriceRow');
            const discountAmountElement = document.getElementById('discountAmount');
            const discountRowElement = document.getElementById('discountRow');

            if (voucherData && voucherData.percent > 0) {
                const { percent, maxDiscount } = voucherData;
                console.log('Applying voucher:', { percent, maxDiscount, total });

                let discounted = Math.round(total * (1 - percent / 100));
                if (total - discounted >= maxDiscount) {
                    discounted = total - maxDiscount;
                }

                console.log('Voucher calculation:', { total, discounted, discount: total - discounted });

                cartTotalElement.textContent = discounted.toLocaleString('vi-VN') + 'đ';
                originalPriceElement.textContent = total.toLocaleString('vi-VN') + 'đ';
                discountAmountElement.textContent = (total - discounted).toLocaleString('vi-VN') + 'đ';

                originalPriceRowElement.style.display = 'flex';
                discountRowElement.style.display = 'flex';

                localStorage.setItem('cartTotalAfterDiscount', discounted);
            } else {
                console.log('No voucher applied or invalid voucher data');
                cartTotalElement.textContent = total.toLocaleString('vi-VN') + 'đ';
                originalPriceRowElement.style.display = 'none';
                discountRowElement.style.display = 'none';
            }
        }

        document.addEventListener('DOMContentLoaded', loadCartItems);

        // Đọc tổng tiền từ localStorage khi load trang
        document.addEventListener('DOMContentLoaded', () => {
            const savedTotal = localStorage.getItem('cart_total');
            if (savedTotal) {
                const total = parseFloat(savedTotal);
                console.log('Loading saved cart total from localStorage:', total);
                document.getElementById('cartTotal').textContent = total.toLocaleString('vi-VN') + 'đ';
            }
        });

        window.addEventListener('voucherApplied', loadCartItems);

        window.addEventListener('beforeunload', syncCartUpdateToServer);

        document.getElementById('checkoutBtn')?.addEventListener('click', async function () {
            await syncCartUpdateToServer();
            // Tiếp tục chuyển sang trang thanh toán
        });

        window.addEventListener('load', () => {
            const isCheckout = sessionStorage.getItem('checkoutInProgress');
            if (!isCheckout) {
                localStorage.removeItem('voucher');
                localStorage.removeItem('cartTotalAfterDiscount');
                localStorage.removeItem('voucher_id');
            } else {
                sessionStorage.removeItem('checkoutInProgress');
            }
        });
    </script>
}
